export = WorldstateObject;
declare class WorldstateObject {
    /**
     * @param   {BaseContentObject} data The object data
     * @param   {TimeDateFunctions} timeDate time date functions
     */
    constructor(data: BaseContentObject, { timeDate }: TimeDateFunctions);
    /**
     * The object's id field
     * @type {Identifier.$id|Identifier.$oid}
     */
    id: Identifier.$id | Identifier.$oid;
    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    private timeDate;
    /**
     * The date and time at which the void trader arrives
     * @type {Date}
     */
    activation: Date;
    /**
     * A string indicating how long it will take for the trader to arrive
     *  (at time of object creation)
     * @type {string}
     */
    startString: string;
    /**
     * The date and time at which the void trader leaves
     * @type {Date}
     */
    expiry: Date;
    /**
     * Whether the void trader is active (at time of object creation)
     * @type {boolean}
     */
    active: boolean;
    /**
     * Returns a string representation of the object
     * @returns {string}
     */
    toString(): string;
    /**
     * Get whether the trader is currently active
     * @returns {boolean}
     */
    isActive(): boolean;
    /**
     * Get a string indicating how long it will take for the trader to arrive
     * @returns {string}
     */
    getStartString(): string;
    /**
     * Get a string indicating how long it will take for the trader to leave
     * @returns {string}
     */
    getEndString(): string;
}
declare namespace WorldstateObject {
    export { Identifier, LegacyTimestamp, Timestamp, ContentTimestamp, BaseContentObject };
}
type BaseContentObject = {
    _id: Identifier;
    Activation: ContentTimestamp;
    Expiry: ContentTimestamp;
};
type Identifier = {
    /**
     * older identifier schema
     */
    $id: string;
    /**
     * newer global identifier schema
     */
    $oid: string;
};
type LegacyTimestamp = {
    /**
     * second-based timestamp
     */
    sec: number;
};
type Timestamp = {
    /**
     * millisecond-based timestamp
     */
    $numberLong: number;
};
type ContentTimestamp = {
    /**
     * timestamp number wrapper
     */
    $date: LegacyTimestamp | Timestamp;
};
